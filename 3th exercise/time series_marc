# Optional generic preliminaries:
graphics.off() # This closes all of R's graphics windows.
rm(list=ls())

#setwd("C:/Users/u341138/Dropbox/Documents/Teaching/2017-2018/Bayesian statistics/Group exercises/Assignment03")
source("C:/Users/Fu-Rianne/Dropbox/RU/Bayesian Statistics/Excercise 01/DBDA2Eprograms/DBDA2Eprograms/DBDA2E-utilities.R")

# Required packages for this exercise.
require(rjags)
require(coda)

### Helper functions

# Plotting of standard deviation interval
plot_sd <- function(meanvec, sdvec) {
  n = length(meanvec)
  # Compute the upper end of the interval, i.e. expectation+sigma
  upper = meanvec + sdvec
  # Compute the lower end of the interval, i.e. expectation-sigma
  lower = meanvec - sdvec
  # Plot the interval
  polygon(c(1:n, rev(1:n)), c(lower, rev(upper)), col=rgb(0.2, 0.2, 0.2, 0.1), border=NA)
  # Plot the upper and lower bounds of the interval as a dotted line
  lines(1:n, lower, lty=3, col=rgb(0.1, 0.1, 0.1))
  lines(1:n, upper, lty=3, col=rgb(0.1, 0.1, 0.1))
}



# Example usage of plot_sd()
n = 100
sigma = 1
x = rnorm(n, 0, sigma)
mean_vector = rep(0,n)
plot(x, type='l', xaxs='i')
plot_sd(mean_vector, rep(sigma, n))



load(file='timeseries.Rdata')
n = length(y)

# Time series exercise 1

plot(y, pch=19, xlab='Observation index', type='o')

model_notimeseries = "
model {

#Prior
tau ~ dgamma(0.1, 0.1)
sigma <- 1/sqrt(tau)
mu ~ dnorm(0,1)

#Likelihood
for(i in 1:n){
y[i] ~ dnorm(mu, tau)
}
}

"

model_timeseries = "
model {

#Prior
tau ~ dgamma(0.1, 0.1)
sigma <- 1/sqrt(tau)
mu ~ dnorm(0,1)

#Likelihood
y[1] ~ dnorm(mu, tau)
for(i in 2:n){
y[i] ~ dnorm(y[i-1], tau)
}
}

"

niter=10000
nchains=4
nsamples = niter*nchains

data <- list('n' = n, 'y' = y) # to be passed on to JAGS
parameters <- c('mu', 'sigma') # fill in
jagsmodel <- jags.model(textConnection(model_timeseries), # change to model_notimeseries if you want to plot the results for the simple model
                        data = data, 
                        n.chains = nchains)
samples = as.matrix(coda.samples(jagsmodel, parameters, n.iter = niter))

# Compute posterior expectation of the vector y:
samples[,'mu']
mcmcsummary = summary(samples)

# Compute posterior expectation of the standard deviation sigma:
samples[,'sigma']

# Plot the actual data y, the posterior expectation, and the certainty interval (using plot_sd, see top of script)
sigma = 2.473  
y_mean = 2.777
mean_vector = rep(y_mean, n)
plot(y, type='l', xaxs='i')
plot_sd(mean_vector, rep(sigma, n))

# Repeat for the other model
m2 <- samples[,'mu']
new <- c(m2[1], y[1:99])

y_mean = 2.988592
sigma = 2.575
mean_vector = rep(y_mean, n)
plot(y, type='l', xaxs='i')
plot_sd(new, rep(sigma, n))



# Model comparison:
model_timeseries_or_notimeseres = "
model {

#Prior
tau ~ dgamma(0.1, 0.1)
sigma <- 1/sqrt(tau)
mu ~ dnorm(0,1)

m_prob[1] <- 0.5
m_prob[2] <- 0.5
m ~ dcat(m_prob[])

y[1] ~ dnorm(mu, tau)

#Likelihood
for(i in 2:n){
psi[i] <- equals(m,1)*mu + equals(m,2)*y[i-1]
y[i] ~ dnorm(psi[i], tau)
}
}

"

niter=10000
nchains=4
nsamples = niter*nchains

data <- list('n' = n, 'y' = y, 'm'=m) # to be passed on to JAGS
parameters <- c('m') # fill in
jagsmodel <- jags.model(textConnection(model_timeseries_or_notimeseres), # change to model_notimeseries if you want to plot the results for the simple model
                        data = data, 
                        n.chains = nchains)
samples = as.matrix(coda.samples(jagsmodel, parameters, n.iter = niter))

m=samples[,'m']

# Compute the Bayes factor of the comparison:

posterior_m1= sum(m==1)/length(m)
posterior_m2= 1-posterior_m1
bf=posterior_m2/posterior_m1


